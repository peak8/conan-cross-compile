name: Conan Create
description: Create and deploy a conan package for a library if it does not already exist.

inputs:
  package_name:
    description: 'The name of the package to build'
    required: true
  package_version:
    description: 'The exact version of the package that it will be tagged as'
    required: true
  profile:
    description: 'The path to the conan profile defining build info'
    required: true
  recipe_directory:
    description: 'The path to the required recipe for the library'
    required: true
  options:
      description: 'A string of any options for the package'
      required: false
      type: string
      default: ''

runs:
  using: "composite"
  steps:
    - name: Generate Conan Coordinate
      id: generate_conan_coordinate
      uses: ./.github/actions/generate-conan-coordinate
      with:
        package_name: ${{ inputs.package_name }}
        package_version: ${{ inputs.package_version }}

    - name: Check if Package Exists
      id: package_exists
      env:
        COORD: ${{ env.coordinate }}
      shell: bash
      run: |
        conan search -r peak8 ${{ env.COORD }} --json search.json
        export CONAN_SEARCH_RESULT=$(jq .error search.json)
        echo "searchError=\"${CONAN_SEARCH_RESULT}\"" >> $GITHUB_OUTPUT
        echo "------> Conan search error result = ${CONAN_SEARCH_RESULT}"

    - name: Build Library
      id: build_debug
      if: ${{ env.searchError == false }}
      env:
        COORD: ${{ env.coordinate }}
      shell: bash
      run: |
        conan create
        ${{ inputs.recipe_directory }}/
        ${{ env.COORD }}
        -s build_type=Debug
        --build=missing
        --profile:build default
        --profile:host ${{ inputs.profile }}
        --test-folder None
        
        

    # - name: Deploy to Artifactory
    #   id: deploy_debug
    #   if: ${{ env.packageExists == false && (steps.build_debug.outcome == 'success') }}
    #   shell: bash
    #   run: |
    #     conan upload
    #     --all
    #     --confirm
    #     --remote peak8
    #     '*'

    # - name: Build Library
    #   id: build_release
    #   if: ${{ env.packageExists == false && (steps.deploy_debug.outcome == 'success') }}
    #   shell: bash
    #   run: |
    #     conan create
    #     --build=missing
    #     --profile:build default
    #     --profile:host ${{ inputs.profile }}
    #     --test-folder None
    #     ${{ inputs.options }}
    #     -s build_type=Release
    #     ${{ inputs.recipe_directory }}/
    #     ${{ env.PACKAGE_COORDINATE }}

    # - name: Deploy to Artifactory
    #   id: deploy_release
    #   if: ${{ env.packageExists == false && (steps.build_release.outcome == 'success') }}
    #   shell: bash
    #   run: |
    #     conan upload
    #     --all
    #     --confirm
    #     --remote peak8
    #     '*'
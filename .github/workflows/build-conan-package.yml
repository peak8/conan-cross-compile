name: Build Conan Package
on:
  workflow_call:
    inputs:
      package_name:
        description: 'The name of the package to build'
        required: true
        type: string
      package_version:
        description: 'The exact version of the package that it will be tagged as'
        required: true
        type: string
      recipe_directory:
        description: 'The directory to build from'
        required: true
        type: string
      options:
        description: 'A string of any options for the package'
        required: false
        type: string
        default: ''
    secrets:
      CONAN_USERNAME:
        required: true
      CONAN_PASSWORD:
        required: true

env:
  CONAN_USERNAME: ${{ secrets.CONAN_USERNAME }}
  CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
  CONAN_NON_INTERACTIVE: 1
  CONAN_REVISIONS_ENABLED: 1
  CONAN_LOGGING_LEVEL: debug

jobs:
  check_if_should_build:
    name: Check if we need to build
    runs-on: ubuntu-22.04
    outputs:
      shouldBuild: ${{ (steps.files_changed.outputs.any_changed == 'true') || (steps.package_exists.outputs.packageExists == 'false') }}
      packageCoordinate: ${{ steps.gpc.outputs.coordinate }}

    steps:
      - uses: actions/checkout@v3.3
        with:
          fetch-depth: 2

      - name: Generate Package Coordinate
        id: gpc
        uses: ./.github/actions/generate-conan-coordinate
        with:
          package_name: ${{ inputs.package_name }}
          package_version: ${{ inputs.package_version }}

      - name: Get changed files
        id: files_changed
        uses: tj-actions/changed-files@v35.4.1
        with:
          files: |
            ${{ inputs.recipe_directory }}
            .github/
            conan-profiles/

      - name: Install Conan
        run: pip install conan

      - name: Configure Conan
        uses: ./.github/actions/configure-conan

      - name: Check if Package Exists
        id: package_exists
        run: >
          ANY_ERRORS=$(conan search -r peak8-conan ${{ env.PACKAGE_COORDINATE }} 2>&1 | grep ERROR | wc -l);
          echo "ANY_ERRORS=[$ANY_ERRORS]";
          if [[ $ANY_ERRORS -gt 0 ]];
          then
            echo "::set-output name=packageExists::false";
            echo "Package does not already exist!";
          else
            echo "::set-output name=packageExists::true";
            echo "Package already exists!";
          fi

#  linux_job:
#    name: Linux-based Builds
#    runs-on: ubuntu-22.04
#    needs: check_if_should_build
#    if: ${{ needs.check_if_should_build.outputs.shouldBuild == 'true' }}
#    strategy:
#      matrix:
#        conan_profile: [android-ndk21d-armeabi-v7, android-ndk21d-armv64-v8a]
#        library_type: [Debug, Release]
#    env:
#      PACKAGE_COORDINATE: ${{ needs.check_if_should_build.outputs.packageCoordinate }}

#    steps:
#      - uses: actions/checkout@v3.3

#      - name: Install Conan
#        run: pip install conan

#      - name: Configure Conan
#        uses: ./.github/actions/configure-conan

#      - name: Use Cached NDK
#        id: cache_ndk
#        uses: actions/cache@v3.2.3
#        with:
#          key: CACHE_KEY_NDK
#          path: |
#            - ~/.conan/data/android-ndk/r22b/

#      - name: Build Library
#        env:
#          CC: ${{ steps.setup-ndk.outputs.ndk-path }}
#        run: >
#          conan create
#          --build=missing
#          --profile:build default
#          --profile:host conan-profiles/${{ matrix.conan_profile }}
#          --test-folder None
#          ${{ inputs.options }}
#          -s build_type=${{ matrix.library_type }}
#          ${{ inputs.recipe_directory }}/
#          ${{ env.PACKAGE_COORDINATE }}

#      - name: Deploy to Artifactory
#        run: >
#          conan upload
#          --all
#          --confirm
#          --remote peak8-conan
#          '*'

  windows_job:
    name: Windows-based Builds
    runs-on: windows-2022
    needs: check_if_should_build
    if: ${{ needs.check_if_should_build.outputs.shouldBuild == 'true' }}
    strategy:
      matrix:
        conan_profile: [windows-x86_64]
        library_type: [Debug, Release]
    env:
      PACKAGE_COORDINATE: ${{ needs.check_if_should_build.outputs.packageCoordinate }}

    steps:
      - uses: actions/checkout@v3.3

      - name: Install Conan
        run: pip install conan

      - name: Configure Conan
        uses: ./.github/actions/configure-conan

      - name: Build Library
        shell: cmd
        run: >
          conan create
          --build=missing
          --profile:build default
          --profile:host conan-profiles/${{ matrix.conan_profile }}
          --test-folder None
          ${{ inputs.options }}
          -s build_type=${{ matrix.library_type }}
          ${{ inputs.recipe_directory }}/
          ${{ env.PACKAGE_COORDINATE }}

      - name: Deploy to Artifactory
        run: >
          conan upload
          --all
          --confirm
          --remote peak8-conan
          '*'

#  mac_job:
#    name: macOS-based Builds
#    runs-on: macos-12
#    needs: check_if_should_build
#    if: ${{ needs.check_if_should_build.outputs.shouldBuild == 'true' }}
#    strategy:
#      matrix:
#        conan_profile: [mac_intel, mac_arm, ios]
#        library_type: [Debug, Release]
#    env:
#      PACKAGE_COORDINATE: ${{ needs.check_if_should_build.outputs.packageCoordinate }}
#
#    steps:
#      - uses: actions/checkout@v3.3

#      - name: Install Conan
#        run: brew install conan

#      - name: Configure Conan
#        uses: ./.github/actions/configure-conan

#      - name: Build Library
#        run: >
#          conan create
#          --build=missing
#          --profile:build default
#          --profile:host conan-profiles/${{ matrix.conan_profile }}
#          --test-folder None
#          ${{ inputs.options }}
#          -s build_type=${{ matrix.library_type }}
#          ${{ inputs.recipe_directory }}/
#          ${{ env.PACKAGE_COORDINATE }}
#      - name: Deploy to Artifactory
#        run: >
#          conan upload
#          --all
#          --confirm
#          --remote peak8-conan
#          '*'